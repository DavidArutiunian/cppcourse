#ifndef CPPCOURSE_LINE_H
#define CPPCOURSE_LINE_H

#include <SFML/Graphics.hpp>

#include "consts.h"

using VertexArray = std::array<sf::Vertex, VERTEX_SIZE>;

class Line : public sf::Drawable
{
private:
  VertexArray vertex; // Array of two vertexes

  ////////////////////////////////////////////////////////////
  /// \brief Draw the object to a render target
  ///
  /// \param target Render target to draw to
  /// \param states Current render states
  ////////////////////////////////////////////////////////////
  void draw(sf::RenderTarget &target, sf::RenderStates states) const override;

public:
  ////////////////////////////////////////////////////////////
  /// \brief Construct new line
  ///
  /// \param vertex sf::Vertex object
  ////////////////////////////////////////////////////////////
  explicit Line(VertexArray &vertex);

  ////////////////////////////////////////////////////////////
  /// \brief Default constructor
  ////////////////////////////////////////////////////////////
  ~Line() override = default;

  ////////////////////////////////////////////////////////////
  /// \brief Vertex getter
  ///
  /// \return Vertex
  ////////////////////////////////////////////////////////////
  VertexArray *getVertex();

  ////////////////////////////////////////////////////////////
  /// \brief Set end position of line
  ///
  /// \param nextPosition Current mouse position
  ////////////////////////////////////////////////////////////
  void setEndPosition(const sf::Vector2f &nextPosition);

  ////////////////////////////////////////////////////////////
  /// \brief Get length of line
  ///
  /// \return Length
  ////////////////////////////////////////////////////////////
  float length();

};


#endif //CPPCOURSE_LINE_H
